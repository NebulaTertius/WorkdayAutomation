//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace AI.Automation
{

    [Persistent(@"AI.CatalogMapping")]
    public partial class AICatalogMapping : XPObject
    {
        string fCatalogType;
        [Size(SizeAttribute.Unlimited)]
        public string CatalogType
        {
            get { return fCatalogType; }
            set { SetPropertyValue<string>(nameof(CatalogType), ref fCatalogType, value); }
        }
        string fCatalogSubType;
        [Size(SizeAttribute.Unlimited)]
        public string CatalogSubType
        {
            get { return fCatalogSubType; }
            set { SetPropertyValue<string>(nameof(CatalogSubType), ref fCatalogSubType, value); }
        }
        string fCatalogName;
        [Size(SizeAttribute.Unlimited)]
        public string CatalogName
        {
            get { return fCatalogName; }
            set { SetPropertyValue<string>(nameof(CatalogName), ref fCatalogName, value); }
        }
        string fCatalogLocale;
        [Size(SizeAttribute.Unlimited)]
        public string CatalogLocale
        {
            get { return fCatalogLocale; }
            set { SetPropertyValue<string>(nameof(CatalogLocale), ref fCatalogLocale, value); }
        }
        string fLookupOrigin;
        [Size(SizeAttribute.Unlimited)]
        public string LookupOrigin
        {
            get { return fLookupOrigin; }
            set { SetPropertyValue<string>(nameof(LookupOrigin), ref fLookupOrigin, value); }
        }
        string fLookupObjectType;
        [Size(SizeAttribute.Unlimited)]
        public string LookupObjectType
        {
            get { return fLookupObjectType; }
            set { SetPropertyValue<string>(nameof(LookupObjectType), ref fLookupObjectType, value); }
        }
        string fLookupObjectName;
        [Size(SizeAttribute.Unlimited)]
        public string LookupObjectName
        {
            get { return fLookupObjectName; }
            set { SetPropertyValue<string>(nameof(LookupObjectName), ref fLookupObjectName, value); }
        }
        string fLookupFieldName;
        [Size(SizeAttribute.Unlimited)]
        public string LookupFieldName
        {
            get { return fLookupFieldName; }
            set { SetPropertyValue<string>(nameof(LookupFieldName), ref fLookupFieldName, value); }
        }
        string fSourceField;
        [Size(SizeAttribute.Unlimited)]
        public string SourceField
        {
            get { return fSourceField; }
            set { SetPropertyValue<string>(nameof(SourceField), ref fSourceField, value); }
        }
        string fSourceValue;
        [Size(SizeAttribute.Unlimited)]
        public string SourceValue
        {
            get { return fSourceValue; }
            set { SetPropertyValue<string>(nameof(SourceValue), ref fSourceValue, value); }
        }
        string fTargetField;
        [Size(SizeAttribute.Unlimited)]
        public string TargetField
        {
            get { return fTargetField; }
            set { SetPropertyValue<string>(nameof(TargetField), ref fTargetField, value); }
        }
        string fTargetValue;
        [Size(SizeAttribute.Unlimited)]
        public string TargetValue
        {
            get { return fTargetValue; }
            set { SetPropertyValue<string>(nameof(TargetValue), ref fTargetValue, value); }
        }
        string fComment;
        [Size(SizeAttribute.Unlimited)]
        public string Comment
        {
            get { return fComment; }
            set { SetPropertyValue<string>(nameof(Comment), ref fComment, value); }
        }
    }

}
